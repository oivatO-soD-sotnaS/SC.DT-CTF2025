{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/app/%28public%29/_components/shader-background.tsx"],"sourcesContent":["\"use client\"\n\nimport type React from \"react\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport { MeshGradient } from \"@paper-design/shaders-react\"\n\ninterface ShaderBackgroundProps {\n  children: React.ReactNode\n}\n\nexport default function ShaderBackground({ children }: ShaderBackgroundProps) {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [isActive, setIsActive] = useState(false)\n\n  useEffect(() => {\n    const handleMouseEnter = () => setIsActive(true)\n    const handleMouseLeave = () => setIsActive(false)\n\n    const container = containerRef.current\n    if (container) {\n      container.addEventListener(\"mouseenter\", handleMouseEnter)\n      container.addEventListener(\"mouseleave\", handleMouseLeave)\n    }\n\n    return () => {\n      if (container) {\n        container.removeEventListener(\"mouseenter\", handleMouseEnter)\n        container.removeEventListener(\"mouseleave\", handleMouseLeave)\n      }\n    }\n  }, [])\n\n  return (\n    <div ref={containerRef} className=\"min-h-screen bg-black relative overflow-hidden\">\n      {/* SVG Filters */}\n      <svg className=\"absolute inset-0 w-0 h-0\">\n        <defs>\n          <filter id=\"glass-effect\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feTurbulence baseFrequency=\"0.005\" numOctaves=\"1\" result=\"noise\" />\n            <feDisplacementMap in=\"SourceGraphic\" in2=\"noise\" scale=\"0.3\" />\n            <feColorMatrix\n              type=\"matrix\"\n              values=\"1 0 0 0 0.02\n                      0 1 0 0 0.02\n                      0 0 1 0 0.05\n                      0 0 0 0.9 0\"\n              result=\"tint\"\n            />\n          </filter>\n          <filter id=\"gooey-filter\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"4\" result=\"blur\" />\n            <feColorMatrix\n              in=\"blur\"\n              mode=\"matrix\"\n              values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9\"\n              result=\"gooey\"\n            />\n            <feComposite in=\"SourceGraphic\" in2=\"gooey\" operator=\"atop\" />\n          </filter>\n        </defs>\n      </svg>\n\n      {/* Background Shaders */}\n      <MeshGradient\n        className=\"absolute inset-0 w-full h-full\"\n        colors={[\"#000000\", \"#8b5cf6\", \"#ffffff\", \"#1e1b4b\", \"#4c1d95\"]}\n        speed={0.3}\n        backgroundColor=\"#000000\"\n      />\n      <MeshGradient\n        className=\"absolute inset-0 w-full h-full opacity-60\"\n        colors={[\"#000000\", \"#ffffff\", \"#8b5cf6\", \"#000000\"]}\n        speed={0.2}\n        wireframe=\"true\"\n        backgroundColor=\"transparent\"\n      />\n\n      {children}\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;AAIA;AACA;AALA;;;;AAWe,SAAS,iBAAiB,EAAE,QAAQ,EAAyB;IAC1E,MAAM,eAAe,IAAA,+MAAM,EAAiB;IAC5C,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAC;IAEzC,IAAA,kNAAS,EAAC;QACR,MAAM,mBAAmB,IAAM,YAAY;QAC3C,MAAM,mBAAmB,IAAM,YAAY;QAE3C,MAAM,YAAY,aAAa,OAAO;QACtC,IAAI,WAAW;YACb,UAAU,gBAAgB,CAAC,cAAc;YACzC,UAAU,gBAAgB,CAAC,cAAc;QAC3C;QAEA,OAAO;YACL,IAAI,WAAW;gBACb,UAAU,mBAAmB,CAAC,cAAc;gBAC5C,UAAU,mBAAmB,CAAC,cAAc;YAC9C;QACF;IACF,GAAG,EAAE;IAEL,qBACE,8OAAC;QAAI,KAAK;QAAc,WAAU;;0BAEhC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;;sCACC,8OAAC;4BAAO,IAAG;4BAAe,GAAE;4BAAO,GAAE;4BAAO,OAAM;4BAAO,QAAO;;8CAC9D,8OAAC;oCAAa,eAAc;oCAAQ,YAAW;oCAAI,QAAO;;;;;;8CAC1D,8OAAC;oCAAkB,IAAG;oCAAgB,KAAI;oCAAQ,OAAM;;;;;;8CACxD,8OAAC;oCACC,MAAK;oCACL,QAAO;oCAIP,QAAO;;;;;;;;;;;;sCAGX,8OAAC;4BAAO,IAAG;4BAAe,GAAE;4BAAO,GAAE;4BAAO,OAAM;4BAAO,QAAO;;8CAC9D,8OAAC;oCAAe,IAAG;oCAAgB,cAAa;oCAAI,QAAO;;;;;;8CAC3D,8OAAC;oCACC,IAAG;oCACH,MAAK;oCACL,QAAO;oCACP,QAAO;;;;;;8CAET,8OAAC;oCAAY,IAAG;oCAAgB,KAAI;oCAAQ,UAAS;;;;;;;;;;;;;;;;;;;;;;;0BAM3D,8OAAC,4MAAY;gBACX,WAAU;gBACV,QAAQ;oBAAC;oBAAW;oBAAW;oBAAW;oBAAW;iBAAU;gBAC/D,OAAO;gBACP,iBAAgB;;;;;;0BAElB,8OAAC,4MAAY;gBACX,WAAU;gBACV,QAAQ;oBAAC;oBAAW;oBAAW;oBAAW;iBAAU;gBACpD,OAAO;gBACP,WAAU;gBACV,iBAAgB;;;;;;YAGjB;;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/node_modules/%40paper-design/shaders/src/vertex-shader.ts"],"sourcesContent":["/** Vertex shader for the shader mount */\n// language=GLSL\nexport const vertexShaderSource = `#version 300 es\nprecision mediump float;\n\nlayout(location = 0) in vec4 a_position;\n\nuniform vec2 u_resolution;\nuniform float u_pixelRatio;\nuniform float u_imageAspectRatio;\n\nuniform float u_originX;\nuniform float u_originY;\nuniform float u_worldWidth;\nuniform float u_worldHeight;\nuniform float u_fit;\n\nuniform float u_scale;\nuniform float u_rotation;\nuniform float u_offsetX;\nuniform float u_offsetY;\n\nuniform float u_pxSize;\n\nout vec2 v_objectUV;\nout vec2 v_objectBoxSize;\nout vec2 v_objectHelperBox;\n\nout vec2 v_responsiveUV;\nout vec2 v_responsiveBoxSize;\nout vec2 v_responsiveHelperBox;\nout vec2 v_responsiveBoxGivenSize;\n\nout vec2 v_patternUV;\nout vec2 v_patternBoxSize;\nout vec2 v_patternHelperBox;\n\nout vec2 v_imageUV;\n\n// #define ADD_HELPERS\n\nvec3 getBoxSize(float boxRatio, vec2 givenBoxSize, vec2 maxBoxSize) {\n  vec2 box = vec2(0.);\n  // fit = none\n  box.x = boxRatio * min(givenBoxSize.x / boxRatio, givenBoxSize.y);\n  float noFitBoxWidth = box.x;\n  if (u_fit == 1.) { // fit = contain\n    box.x = boxRatio * min(maxBoxSize[0] / boxRatio, maxBoxSize[1]);\n  } else if (u_fit == 2.) { // fit = cover\n    box.x = boxRatio * max(maxBoxSize[0] / boxRatio, maxBoxSize[1]);\n  }\n  box.y = box.x / boxRatio;\n  return vec3(box, noFitBoxWidth);\n}\n\nvoid main() {\n  gl_Position = a_position;\n\n  vec2 uv = gl_Position.xy * .5;\n  vec2 boxOrigin = vec2(.5 - u_originX, u_originY - .5);\n  vec2 givenBoxSize = vec2(u_worldWidth, u_worldHeight);\n  givenBoxSize = max(givenBoxSize, vec2(1.)) * u_pixelRatio;\n  vec2 maxBoxSize = vec2(max(u_resolution.x, givenBoxSize.x), max(u_resolution.y, givenBoxSize.y));\n  float r = u_rotation * 3.14159265358979323846 / 180.;\n  mat2 graphicRotation = mat2(cos(r), sin(r), -sin(r), cos(r));\n  vec2 graphicOffset = vec2(-u_offsetX, u_offsetY);\n\n\n  // ===================================================\n  // Sizing api for graphic objects with fixed ratio\n  // (currently supports only ratio = 1)\n\n  float fixedRatio = 1.;\n  vec2 fixedRatioBoxGivenSize = vec2(\n  (u_worldWidth == 0.) ? u_resolution.x : givenBoxSize.x,\n  (u_worldHeight == 0.) ? u_resolution.y : givenBoxSize.y\n  );\n\n  v_objectBoxSize = getBoxSize(fixedRatio, fixedRatioBoxGivenSize, maxBoxSize).xy;\n  vec2 objectWorldScale = u_resolution.xy / v_objectBoxSize;\n\n  #ifdef ADD_HELPERS\n  v_objectHelperBox = uv;\n  v_objectHelperBox *= objectWorldScale;\n  v_objectHelperBox += boxOrigin * (objectWorldScale - 1.);\n  #endif\n\n  v_objectUV = uv;\n  v_objectUV *= objectWorldScale;\n  v_objectUV += boxOrigin * (objectWorldScale - 1.);\n  v_objectUV += graphicOffset;\n  v_objectUV /= u_scale;\n  v_objectUV = graphicRotation * v_objectUV;\n\n\n  // ===================================================\n\n\n  // ===================================================\n  // Sizing api for graphic objects with either givenBoxSize ratio or canvas ratio.\n  // Full-screen mode available with u_worldWidth = u_worldHeight = 0\n\n  v_responsiveBoxGivenSize = vec2(\n  (u_worldWidth == 0.) ? u_resolution.x : givenBoxSize.x,\n  (u_worldHeight == 0.) ? u_resolution.y : givenBoxSize.y\n  );\n  float responsiveRatio = v_responsiveBoxGivenSize.x / v_responsiveBoxGivenSize.y;\n  v_responsiveBoxSize = getBoxSize(responsiveRatio, v_responsiveBoxGivenSize, maxBoxSize).xy;\n  vec2 responsiveBoxScale = u_resolution.xy / v_responsiveBoxSize;\n\n  #ifdef ADD_HELPERS\n  v_responsiveHelperBox = uv;\n  v_responsiveHelperBox *= responsiveBoxScale;\n  v_responsiveHelperBox += boxOrigin * (responsiveBoxScale - 1.);\n  #endif\n\n  v_responsiveUV = uv;\n  v_responsiveUV *= responsiveBoxScale;\n  v_responsiveUV += boxOrigin * (responsiveBoxScale - 1.);\n  v_responsiveUV += graphicOffset;\n  v_responsiveUV /= u_scale;\n  v_responsiveUV.x *= responsiveRatio;\n  v_responsiveUV = graphicRotation * v_responsiveUV;\n  v_responsiveUV.x /= responsiveRatio;\n\n  // ===================================================\n\n\n  // ===================================================\n  // Sizing api for patterns\n  // (treating graphics as a image u_worldWidth x u_worldHeight size)\n\n  float patternBoxRatio = givenBoxSize.x / givenBoxSize.y;\n  vec2 patternBoxGivenSize = vec2(\n  (u_worldWidth == 0.) ? u_resolution.x : givenBoxSize.x,\n  (u_worldHeight == 0.) ? u_resolution.y : givenBoxSize.y\n  );\n  patternBoxRatio = patternBoxGivenSize.x / patternBoxGivenSize.y;\n\n  vec3 boxSizeData = getBoxSize(patternBoxRatio, patternBoxGivenSize, maxBoxSize);\n  v_patternBoxSize = boxSizeData.xy;\n  float patternBoxNoFitBoxWidth = boxSizeData.z;\n  vec2 patternBoxScale = u_resolution.xy / v_patternBoxSize;\n\n  #ifdef ADD_HELPERS\n  v_patternHelperBox = uv;\n  v_patternHelperBox *= patternBoxScale;\n  v_patternHelperBox += boxOrigin * (patternBoxScale - 1.);\n  #endif\n\n  v_patternUV = uv;\n  v_patternUV += graphicOffset / patternBoxScale;\n  v_patternUV += boxOrigin;\n  v_patternUV -= boxOrigin / patternBoxScale;\n  v_patternUV *= u_resolution.xy;\n  v_patternUV /= u_pixelRatio;\n  if (u_fit > 0.) {\n    v_patternUV *= (patternBoxNoFitBoxWidth / v_patternBoxSize.x);\n  }\n  v_patternUV /= u_scale;\n  v_patternUV = graphicRotation * v_patternUV;\n  v_patternUV += boxOrigin / patternBoxScale;\n  v_patternUV -= boxOrigin;\n  // x100 is a default multiplier between vertex and fragmant shaders\n  // we use it to avoid UV presision issues\n  v_patternUV *= .01;\n\n  // ===================================================\n\n\n  // ===================================================\n  // Sizing api for images\n\n  vec2 imageBoxSize;\n  if (u_fit == 1.) { // contain\n    imageBoxSize.x = min(maxBoxSize.x / u_imageAspectRatio, maxBoxSize.y) * u_imageAspectRatio;\n  } else if (u_fit == 2.) { // cover\n    imageBoxSize.x = max(maxBoxSize.x / u_imageAspectRatio, maxBoxSize.y) * u_imageAspectRatio;\n  } else {\n    imageBoxSize.x = min(10.0, 10.0 / u_imageAspectRatio * u_imageAspectRatio);\n  }\n  imageBoxSize.y = imageBoxSize.x / u_imageAspectRatio;\n  vec2 imageBoxScale = u_resolution.xy / imageBoxSize;\n\n  #ifdef ADD_HELPERS\n  vec2 imageHelperBox = uv;\n  imageHelperBox *= imageBoxScale;\n  imageHelperBox += boxOrigin * (imageBoxScale - 1.);\n  #endif\n\n  v_imageUV = uv;\n  v_imageUV *= imageBoxScale;\n  v_imageUV += boxOrigin * (imageBoxScale - 1.);\n  v_imageUV += graphicOffset;\n  v_imageUV /= u_scale;\n  v_imageUV.x *= u_imageAspectRatio;\n  v_imageUV = graphicRotation * v_imageUV;\n  v_imageUV.x /= u_imageAspectRatio;\n\n  v_imageUV += .5;\n  v_imageUV.y = 1. - v_imageUV.y;\n\n  // ===================================================\n\n}`;\n"],"names":[],"mappings":";;;;;;;AAEO,MAAM,qBAAqB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAA,CAAA","debugId":null}},
    {"offset": {"line": 393, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/node_modules/%40paper-design/shaders/src/shader-mount.ts"],"sourcesContent":["import { vertexShaderSource } from './vertex-shader.js';\n\nconst DEFAULT_MAX_PIXEL_COUNT: number = 1920 * 1080 * 4;\n\nexport class ShaderMount {\n  public parentElement: PaperShaderElement;\n  public canvasElement: HTMLCanvasElement;\n  private gl: WebGL2RenderingContext;\n  private program: WebGLProgram | null = null;\n  private uniformLocations: Record<string, WebGLUniformLocation | null> = {};\n  /** The fragment shader that we are using */\n  private fragmentShader: string;\n  /** Stores the RAF for the render loop */\n  private rafId: number | null = null;\n  /** Time of the last rendered frame */\n  private lastRenderTime = 0;\n  /** Total time that we have played any animation, passed as a uniform to the shader for time-based VFX */\n  private currentFrame = 0;\n  /** The current speed that we progress through animation time (multiplies by delta time every update). Allows negatives to play in reverse. If set to 0, rAF will stop entirely so static shaders have no recurring performance costs */\n  private speed = 0;\n  /** Uniforms that are provided by the user for the specific shader being mounted (not including uniforms that this Mount adds, like time and resolution) */\n  private providedUniforms: ShaderMountUniforms;\n  /** Just a sanity check to make sure frames don't run after we're disposed */\n  private hasBeenDisposed = false;\n  /** If the resolution of the canvas has changed since the last render */\n  private resolutionChanged = true;\n  /** Store textures that are provided by the user */\n  private textures: Map<string, WebGLTexture> = new Map();\n  private minPixelRatio;\n  private maxPixelCount;\n  private isSafari = isSafari();\n  private uniformCache: Record<string, unknown> = {};\n  private textureUnitMap: Map<string, number> = new Map();\n\n  constructor(\n    /** The div you'd like to mount the shader to. The shader will match its size. */\n    parentElement: HTMLElement,\n    fragmentShader: string,\n    uniforms: ShaderMountUniforms,\n    webGlContextAttributes?: WebGLContextAttributes,\n    /** The speed of the animation, or 0 to stop it. Supports negative values to play in reverse. */\n    speed = 0,\n    /** Pass a frame to offset the starting u_time value and give deterministic results*/\n    frame = 0,\n    /**\n     * The minimum pixel ratio to render at, defaults to 2.\n     * May be reduced to improve performance or increased together with `maxPixelCount` to improve antialiasing.\n     */\n    minPixelRatio = 2,\n    /**\n     * The maximum amount of physical device pixels to render for the shader,\n     * by default it's 1920 * 1080 * 2x dpi (per each side) = 8,294,400 pixels of a 4K screen.\n     * Actual DOM size of the canvas can be larger, it will just lose quality after this.\n     *\n     * May be reduced to improve performance or increased to improve quality on high-resolution screens.\n     */\n    maxPixelCount: number = DEFAULT_MAX_PIXEL_COUNT\n  ) {\n    if (parentElement instanceof HTMLElement) {\n      this.parentElement = parentElement as PaperShaderElement;\n    } else {\n      throw new Error('Paper Shaders: parent element must be an HTMLElement');\n    }\n\n    if (!document.querySelector('style[data-paper-shader]')) {\n      const styleElement = document.createElement('style');\n      styleElement.innerHTML = defaultStyle;\n      styleElement.setAttribute('data-paper-shader', '');\n      document.head.prepend(styleElement);\n    }\n\n    // Create the canvas element and mount it into the provided element\n    const canvasElement = document.createElement('canvas');\n    this.canvasElement = canvasElement;\n    this.parentElement.prepend(canvasElement);\n    this.fragmentShader = fragmentShader;\n    this.providedUniforms = uniforms;\n    // Base our starting animation time on the provided frame value\n    this.currentFrame = frame;\n    this.minPixelRatio = minPixelRatio;\n    this.maxPixelCount = maxPixelCount;\n\n    const gl = canvasElement.getContext('webgl2', webGlContextAttributes);\n    if (!gl) {\n      throw new Error('Paper Shaders: WebGL is not supported in this browser');\n    }\n    this.gl = gl;\n\n    this.initProgram();\n    this.setupPositionAttribute();\n    // Grab the locations of the uniforms in the fragment shader\n    this.setupUniforms();\n    // Put the user provided values into the uniforms\n    this.setUniformValues(this.providedUniforms);\n    // Set up the resize observer to handle window resizing and set u_resolution\n    this.setupResizeObserver();\n\n    // Set the animation speed after everything is ready to go\n    this.setSpeed(speed);\n\n    // Mark parent element as paper shader mount\n    this.parentElement.setAttribute('data-paper-shader', '');\n\n    // Add the shaderMount instance to the div mount element to make it easily accessible\n    this.parentElement.paperShaderMount = this;\n  }\n\n  private initProgram = () => {\n    const program = createProgram(this.gl, vertexShaderSource, this.fragmentShader);\n    if (!program) return;\n    this.program = program;\n  };\n\n  private setupPositionAttribute = () => {\n    const positionAttributeLocation = this.gl.getAttribLocation(this.program!, 'a_position');\n    const positionBuffer = this.gl.createBuffer();\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);\n    const positions = [-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1];\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(positions), this.gl.STATIC_DRAW);\n    this.gl.enableVertexAttribArray(positionAttributeLocation);\n    this.gl.vertexAttribPointer(positionAttributeLocation, 2, this.gl.FLOAT, false, 0, 0);\n  };\n\n  private setupUniforms = () => {\n    // Create a map to store all uniform locations\n    const uniformLocations: Record<string, WebGLUniformLocation | null> = {\n      u_time: this.gl.getUniformLocation(this.program!, 'u_time'),\n      u_pixelRatio: this.gl.getUniformLocation(this.program!, 'u_pixelRatio'),\n      u_resolution: this.gl.getUniformLocation(this.program!, 'u_resolution'),\n    };\n\n    // Add locations for all provided uniforms\n    Object.entries(this.providedUniforms).forEach(([key, value]) => {\n      uniformLocations[key] = this.gl.getUniformLocation(this.program!, key);\n\n      // For texture uniforms, also look for the aspect ratio uniform\n      if (value instanceof HTMLImageElement) {\n        const aspectRatioUniformName = `${key}AspectRatio`;\n        uniformLocations[aspectRatioUniformName] = this.gl.getUniformLocation(this.program!, aspectRatioUniformName);\n      }\n    });\n\n    this.uniformLocations = uniformLocations;\n  };\n\n  /**\n   * The scale that we should render at.\n   * - Used to target 2x rendering even on 1x screens for better antialiasing\n   * - Prevents the virtual resolution from going beyond the maximum resolution\n   * - Accounts for the page zoom level so we render in physical device pixels rather than CSS pixels\n   */\n  private renderScale = 1;\n  private parentWidth = 0;\n  private parentHeight = 0;\n\n  private resizeObserver: ResizeObserver | null = null;\n  private setupResizeObserver = () => {\n    this.resizeObserver = new ResizeObserver(([entry]) => {\n      if (entry?.borderBoxSize[0]) {\n        this.parentWidth = entry.borderBoxSize[0].inlineSize;\n        this.parentHeight = entry.borderBoxSize[0].blockSize;\n      }\n\n      this.handleResize();\n    });\n\n    this.resizeObserver.observe(this.parentElement);\n    visualViewport?.addEventListener('resize', this.handleVisualViewportChange);\n\n    const rect = this.parentElement.getBoundingClientRect();\n    this.parentWidth = rect.width;\n    this.parentHeight = rect.height;\n    this.handleResize();\n  };\n\n  // Visual viewport resize handler, mainly used to react to browser zoom changes.\n  // Wait 2 frames to align with when the resize observer callback is done (in case it might follow):\n  // - Frame 1: a paint after the visual viewport resize\n  // - Frame 2: a paint after the resize observer has been handled, if it was ever triggered\n  //\n  // Both resize observer and visual viewport will react to classic browser zoom changes,\n  // so we dedupe the callbacks, but pinch zoom only triggers the visual viewport handler.\n  private resizeRafId: number | null = null;\n  private handleVisualViewportChange = () => {\n    if (this.resizeRafId !== null) {\n      cancelAnimationFrame(this.resizeRafId);\n    }\n\n    this.resizeRafId = requestAnimationFrame(() => {\n      this.resizeRafId = requestAnimationFrame(() => {\n        this.handleResize();\n      });\n    });\n  };\n\n  /** Resize handler for when the container div changes size or the max pixel count changes and we want to resize our canvas to match */\n  private handleResize = () => {\n    // Cancel any scheduled resize handlers\n    if (this.resizeRafId !== null) {\n      cancelAnimationFrame(this.resizeRafId);\n    }\n\n    const pinchZoom = visualViewport?.scale ?? 1;\n\n    // Zoom level can be calculated comparing the browser's outerWidth and the viewport width.\n    // Note: avoid innerWidth, use visualViewport.width instead.\n    // - innerWidth is affected by pinch zoom in Safari, but not other browsers.\n    //   visualViewport.width works consistently in all browsers.\n    // - innerWidth is rounded to integer, but not visualViewport.width.\n    // - visualViewport.width is affected by hard scrollbars, so they need to be added manually\n    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n    const innerWidth = visualViewport\n      ? visualViewport.scale * visualViewport.width + scrollbarWidth\n      : window.innerWidth;\n\n    // Slight rounding here helps the <canvas> maintain a consistent computed size as the zoom level changes\n    const classicZoom = Math.round((10000 * window.outerWidth) / innerWidth) / 10000;\n\n    // As of 2025, Safari reports physical devicePixelRatio, but other browsers add the current zoom level\n    // https://bugs.webkit.org/show_bug.cgi?id=124862\n    const realPixelRatio = this.isSafari ? devicePixelRatio : devicePixelRatio / classicZoom;\n    const targetPixelRatio = Math.max(realPixelRatio, this.minPixelRatio);\n    const targetRenderScale = targetPixelRatio * classicZoom * pinchZoom;\n    const targetPixelWidth = this.parentWidth * targetRenderScale;\n    const targetPixelHeight = this.parentHeight * targetRenderScale;\n\n    // Prevent the total rendered pixel count from exceeding maxPixelCount\n    const maxPixelCountHeadroom = Math.sqrt(this.maxPixelCount) / Math.sqrt(targetPixelWidth * targetPixelHeight);\n\n    const newRenderScale = targetRenderScale * Math.min(1, maxPixelCountHeadroom);\n    const newWidth = Math.round(this.parentWidth * newRenderScale);\n    const newHeight = Math.round(this.parentHeight * newRenderScale);\n\n    if (\n      this.canvasElement.width !== newWidth ||\n      this.canvasElement.height !== newHeight ||\n      this.renderScale !== newRenderScale // Usually, only render scale change when the user zooms in/out\n    ) {\n      this.renderScale = newRenderScale;\n      this.canvasElement.width = newWidth;\n      this.canvasElement.height = newHeight;\n      this.resolutionChanged = true;\n      this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n      // this is necessary to avoid flashes while resizing (the next scheduled render will set uniforms)\n      this.render(performance.now());\n    }\n  };\n\n  private render = (currentTime: number) => {\n    if (this.hasBeenDisposed) return;\n\n    if (this.program === null) {\n      console.warn('Tried to render before program or gl was initialized');\n      return;\n    }\n\n    // Calculate the delta time\n    const dt = currentTime - this.lastRenderTime;\n    this.lastRenderTime = currentTime;\n    // Increase the total animation time by dt * animationSpeed\n    if (this.speed !== 0) {\n      this.currentFrame += dt * this.speed;\n    }\n\n    // Clear the canvas\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    // Update uniforms\n    this.gl.useProgram(this.program);\n\n    // Update the time uniform\n    this.gl.uniform1f(this.uniformLocations.u_time!, this.currentFrame * 0.001);\n\n    // If the resolution has changed, we need to update the uniform\n    if (this.resolutionChanged) {\n      this.gl.uniform2f(this.uniformLocations.u_resolution!, this.gl.canvas.width, this.gl.canvas.height);\n      this.gl.uniform1f(this.uniformLocations.u_pixelRatio!, this.renderScale);\n      this.resolutionChanged = false;\n    }\n\n    this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n\n    // Loop if we're animating\n    if (this.speed !== 0) {\n      this.requestRender();\n    } else {\n      this.rafId = null;\n    }\n\n  };\n\n  private requestRender = () => {\n    if (this.rafId !== null) {\n      cancelAnimationFrame(this.rafId);\n    }\n    this.rafId = requestAnimationFrame(this.render);\n  };\n\n  /** Creates a texture from an image and sets it into a uniform value */\n  private setTextureUniform = (uniformName: string, image: HTMLImageElement): void => {\n    if (!image.complete || image.naturalWidth === 0) {\n      throw new Error(`Paper Shaders: image for uniform ${uniformName} must be fully loaded`);\n    }\n\n    // Clean up existing texture if present\n    const existingTexture = this.textures.get(uniformName);\n    if (existingTexture) {\n      this.gl.deleteTexture(existingTexture);\n    }\n\n    // Get texture unit\n    if (!this.textureUnitMap.has(uniformName)) {\n      this.textureUnitMap.set(uniformName, this.textureUnitMap.size);\n    }\n    const textureUnit = this.textureUnitMap.get(uniformName)!;\n    // Activate correct texture unit before creating the texture\n    this.gl.activeTexture(this.gl.TEXTURE0 + textureUnit);\n\n    // Create and set up the new texture\n    const texture = this.gl.createTexture();\n    this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n\n    // Set texture parameters\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n\n    // Upload image to texture\n    this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, image);\n    const error = this.gl.getError();\n    if (error !== this.gl.NO_ERROR || texture === null) {\n      console.error('Paper Shaders: WebGL error when uploading texture:', error);\n      return;\n    }\n\n    // Store the texture\n    this.textures.set(uniformName, texture);\n\n    // Set up texture unit and uniform\n    const location = this.uniformLocations[uniformName];\n    if (location) {\n      this.gl.uniform1i(location, textureUnit);\n\n      // Calculate and set the aspect ratio uniform\n      const aspectRatioUniformName = `${uniformName}AspectRatio`;\n      const aspectRatioLocation = this.uniformLocations[aspectRatioUniformName];\n      if (aspectRatioLocation) {\n        const aspectRatio = image.naturalWidth / image.naturalHeight;\n        this.gl.uniform1f(aspectRatioLocation, aspectRatio);\n      }\n    }\n  };\n\n  /** Utility: recursive equality test for all the uniforms */\n  private areUniformValuesEqual = (a: any, b: any): boolean => {\n    if (a === b) return true;\n    if (Array.isArray(a) && Array.isArray(b) && a.length === b.length) {\n      return a.every((val, i) => this.areUniformValuesEqual(val, (b as any)[i]));\n    }\n    return false;\n  };\n\n  /** Sets the provided uniform values into the WebGL program, can be a partial list of uniforms that have changed */\n  private setUniformValues = (updatedUniforms: ShaderMountUniforms) => {\n    this.gl.useProgram(this.program);\n    Object.entries(updatedUniforms).forEach(([key, value]) => {\n      // Grab the value to use in the uniform cache\n      let cacheValue: ShaderMountUniforms[keyof ShaderMountUniforms] | string = value;\n      if (value instanceof HTMLImageElement) {\n        // Images use their src for the cache value to save memory\n        cacheValue = `${value.src.slice(0, 200)}|${value.naturalWidth}x${value.naturalHeight}`;\n      }\n\n      // Check if the uniform value has changed and, if not, bail early to avoid extra work\n      if (this.areUniformValuesEqual(this.uniformCache[key], cacheValue)) return;\n      // Update the uniform cache if we are still here\n      this.uniformCache[key] = cacheValue;\n\n      const location = this.uniformLocations[key];\n      if (!location) {\n        console.warn(`Uniform location for ${key} not found`);\n        return;\n      }\n\n      if (value instanceof HTMLImageElement) {\n        // Texture case, requires a good amount of code so it gets its own function:\n        this.setTextureUniform(key, value);\n      } else if (Array.isArray(value)) {\n        // Array case\n        let flatArray: number[] | null = null;\n        let valueLength: number | null = null;\n\n        // If it's an array of same-sized arrays, flatten it down so we can set the uniform\n        if (value[0] !== undefined && Array.isArray(value[0])) {\n          const firstChildLength = value[0].length;\n          if (value.every((arr) => (arr as number[]).length === firstChildLength)) {\n            // Array of same-sized arrays case, flattens the array sets it\n            flatArray = value.flat();\n            valueLength = firstChildLength;\n          } else {\n            console.warn(`All child arrays must be the same length for ${key}`);\n            return;\n          }\n        } else {\n          // Array of primitive values case, supports 2, 3, 4, 9, 16 length arrays\n          flatArray = value as number[];\n          valueLength = flatArray.length;\n        }\n\n        // Set the uniform based on array length... supports 2, 3, 4, 9, 16 length arrays of primitive values\n        // or arbitrary length arrays of arrays\n        switch (valueLength) {\n          case 2:\n            this.gl.uniform2fv(location, flatArray);\n            break;\n          case 3:\n            this.gl.uniform3fv(location, flatArray);\n            break;\n          case 4:\n            this.gl.uniform4fv(location, flatArray);\n            break;\n          case 9:\n            this.gl.uniformMatrix3fv(location, false, flatArray);\n            break;\n          case 16:\n            this.gl.uniformMatrix4fv(location, false, flatArray);\n            break;\n          default:\n            console.warn(`Unsupported uniform array length: ${valueLength}`);\n        }\n      } else if (typeof value === 'number') {\n        // Number case, supports floats and ints\n        this.gl.uniform1f(location, value);\n      } else if (typeof value === 'boolean') {\n        // Boolean case, supports true and false\n        this.gl.uniform1i(location, value ? 1 : 0);\n      } else {\n        // May happen on the server for SSR when undefined images are passed in\n        console.warn(`Unsupported uniform type for ${key}: ${typeof value}`);\n      }\n    });\n  };\n\n  /** Gets the current total animation time from 0ms */\n  public getCurrentFrame = (): number => {\n    return this.currentFrame;\n  };\n\n  /** Set a frame to get a deterministic result, frames are literally just milliseconds from zero since the animation started */\n  public setFrame = (newFrame: number): void => {\n    this.currentFrame = newFrame;\n    this.lastRenderTime = performance.now();\n    this.render(performance.now());\n  };\n\n  /** Set an animation speed (or 0 to stop animation) */\n  public setSpeed = (newSpeed: number = 1): void => {\n    // Set the new animation speed\n    this.speed = newSpeed;\n\n    if (this.rafId === null && newSpeed !== 0) {\n      // Moving from 0 to animating, kick off a new rAF loop\n      this.lastRenderTime = performance.now();\n      this.rafId = requestAnimationFrame(this.render);\n    }\n\n    if (this.rafId !== null && newSpeed === 0) {\n      // Moving from animating to not animating, cancel the rAF loop\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n  };\n\n  /** Set the maximum pixel count for the shader, this will limit the number of pixels that will be rendered */\n  public setMaxPixelCount = (newMaxPixelCount: number = DEFAULT_MAX_PIXEL_COUNT): void => {\n    this.maxPixelCount = newMaxPixelCount;\n\n    this.handleResize();\n  };\n\n  /** Set the minimum pixel ratio for the shader */\n  public setMinPixelRatio = (newMinPixelRatio: number = 2): void => {\n    this.minPixelRatio = newMinPixelRatio;\n\n    this.handleResize();\n  };\n\n  /** Update the uniforms that are provided by the outside shader, can be a partial set with only the uniforms that have changed */\n  public setUniforms = (newUniforms: ShaderMountUniforms): void => {\n    this.setUniformValues(newUniforms);\n    this.providedUniforms = { ...this.providedUniforms, ...newUniforms };\n\n    this.render(performance.now());\n  };\n\n  /** Dispose of the shader mount, cleaning up all of the WebGL resources */\n  public dispose = (): void => {\n    // Immediately mark as disposed to prevent future renders from leaking in\n    this.hasBeenDisposed = true;\n\n    // Cancel the rAF loop\n    if (this.rafId !== null) {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n\n    if (this.gl && this.program) {\n      // Clean up all textures\n      this.textures.forEach((texture) => {\n        this.gl.deleteTexture(texture);\n      });\n      this.textures.clear();\n\n      this.gl.deleteProgram(this.program);\n      this.program = null;\n\n      // Reset the WebGL context\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n      this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, null);\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n\n      // Clear any errors\n      this.gl.getError();\n    }\n\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n\n    visualViewport?.removeEventListener('resize', this.handleVisualViewportChange);\n\n    this.uniformLocations = {};\n\n    // Remove the shader mount from the div wrapper element to avoid any GC issues\n    this.parentElement.paperShaderMount = undefined;\n  };\n}\n\nfunction createShader(gl: WebGL2RenderingContext, type: number, source: string): WebGLShader | null {\n  const shader = gl.createShader(type);\n  if (!shader) return null;\n\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\nfunction createProgram(\n  gl: WebGL2RenderingContext,\n  vertexShaderSource: string,\n  fragmentShaderSource: string\n): WebGLProgram | null {\n  const format = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);\n  const precision = format ? format.precision : null;\n  // MEDIUM_FLOAT precision can be 10, 16 or 23 bits depending on device;\n  // Shaders fail on 10 bit (and 16 bit is hard to test) => we force 23-bit by switching to highp\n  if (precision && precision < 23) {\n    vertexShaderSource = vertexShaderSource.replace(/precision\\s+(lowp|mediump)\\s+float;/g, 'precision highp float;');\n    fragmentShaderSource = fragmentShaderSource\n      .replace(/precision\\s+(lowp|mediump)\\s+float/g, 'precision highp float')\n      .replace(/\\b(uniform|varying|attribute)\\s+(lowp|mediump)\\s+(\\w+)/g, '$1 highp $3');\n  }\n\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n  const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n  if (!vertexShader || !fragmentShader) return null;\n\n  const program = gl.createProgram();\n  if (!program) return null;\n\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n    gl.deleteShader(vertexShader);\n    gl.deleteShader(fragmentShader);\n    return null;\n  }\n\n  // Clean up shaders after successful linking\n  gl.detachShader(program, vertexShader);\n  gl.detachShader(program, fragmentShader);\n  gl.deleteShader(vertexShader);\n  gl.deleteShader(fragmentShader);\n\n  return program;\n}\n\nconst defaultStyle = `@layer paper-shaders {\n  :where([data-paper-shader]) {\n    isolation: isolate;\n    position: relative;\n\n    & canvas {\n      contain: strict;\n      display: block;\n      position: absolute;\n      inset: 0;\n      z-index: -1;\n      width: 100%;\n      height: 100%;\n      border-radius: inherit;\n    }\n  }\n}`;\n\n/** The parent `<div>` element that has a ShaderMount available on it */\nexport interface PaperShaderElement extends HTMLElement {\n  paperShaderMount: ShaderMount | undefined;\n}\n\n/** Check if an element is a Paper shader element */\nexport function isPaperShaderElement(element: HTMLElement): element is PaperShaderElement {\n  return 'paperShaderMount' in element;\n}\n\n/**\n * Uniform types that we support to be auto-mapped into the fragment shader\n *\n * We accept undefined as a convenience for server rendering, when some things may be undefined\n * We just skip setting the uniform if it's undefined. This allows the shader mount to still take up space during server rendering\n */\nexport interface ShaderMountUniforms {\n  [key: string]: boolean | number | number[] | number[][] | HTMLImageElement | undefined;\n}\n\nexport interface ShaderMotionParams {\n  speed?: number;\n  frame?: number;\n}\n\nexport type ShaderPreset<T> = {\n  name: string;\n  params: Required<T>;\n};\n\nfunction isSafari() {\n  const ua = navigator.userAgent.toLowerCase();\n  return ua.includes('safari') && !ua.includes('chrome') && !ua.includes('android');\n}\n"],"names":["vertexShaderSource"],"mappings":"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","debugId":null}},
    {"offset": {"line": 838, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/node_modules/%40paper-design/shaders-react/src/use-merge-refs.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Merges an array of refs into a single memoized callback ref or `null`.\n * @see https://floating-ui.com/docs/react-utils#usemergerefs\n */\nexport function useMergeRefs<Instance>(refs: Array<React.Ref<Instance> | undefined>): null | React.Ref<Instance> {\n  const cleanupRef = React.useRef<void | (() => void)>(undefined);\n\n  const refEffect = React.useCallback((instance: Instance | null) => {\n    const cleanups = refs.map((ref) => {\n      if (ref == null) {\n        return;\n      }\n\n      if (typeof ref === 'function') {\n        const refCallback = ref;\n        const refCleanup: void | (() => void) = refCallback(instance);\n        return typeof refCleanup === 'function'\n          ? refCleanup\n          : () => {\n              refCallback(null);\n            };\n      }\n\n      (ref as React.RefObject<Instance | null>).current = instance;\n      return () => {\n        (ref as React.RefObject<Instance | null>).current = null;\n      };\n    });\n\n    return () => {\n      cleanups.forEach((refCleanup) => refCleanup?.());\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n\n  return React.useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null;\n    }\n\n    return (value) => {\n      if (cleanupRef.current) {\n        cleanupRef.current();\n        (cleanupRef as React.RefObject<void | (() => void)>).current = undefined;\n      }\n\n      if (value != null) {\n        (cleanupRef as React.RefObject<void | (() => void)>).current = refEffect(value);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n"],"names":[],"mappings":";;;;;;;AAAA,YAAY,WAAW;;AAMhB,SAAS,aAAuB,IAAA,EAA0E;IAC/G,MAAM,aAAa,MAAM,yMAAA,CAA4B,KAAA,CAAS;IAE9D,MAAM,YAAY,MAAM,8MAAA,CAAY,CAAC,aAA8B;QACjE,MAAM,WAAW,KAAK,GAAA,CAAI,CAAC,QAAQ;YACjC,IAAI,OAAO,MAAM;gBACf;YACF;YAEA,IAAI,OAAO,QAAQ,YAAY;gBAC7B,MAAM,cAAc;gBACpB,MAAM,aAAkC,YAAY,QAAQ;gBAC5D,OAAO,OAAO,eAAe,aACzB,aACA,MAAM;oBACJ,YAAY,IAAI;gBAClB;YACN;YAEC,IAAyC,OAAA,GAAU;YACpD,OAAO,MAAM;gBACV,IAAyC,OAAA,GAAU;YACtD;QACF,CAAC;QAED,OAAO,MAAM;YACX,SAAS,OAAA,CAAQ,CAAC,aAAe,aAAa,CAAC;QACjD;IAEF,GAAG,IAAI;IAEP,OAAO,MAAM,0MAAA,CAAQ,MAAM;QACzB,IAAI,KAAK,KAAA,CAAM,CAAC,MAAQ,OAAO,IAAI,GAAG;YACpC,OAAO;QACT;QAEA,OAAO,CAAC,UAAU;YAChB,IAAI,WAAW,OAAA,EAAS;gBACtB,WAAW,OAAA,CAAQ;gBAClB,WAAoD,OAAA,GAAU,KAAA;YACjE;YAEA,IAAI,SAAS,MAAM;gBAChB,WAAoD,OAAA,GAAU,UAAU,KAAK;YAChF;QACF;IAEF,GAAG,IAAI;AACT","debugId":null}},
    {"offset": {"line": 891, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/node_modules/%40paper-design/shaders-react/src/shader-mount.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useRef, forwardRef, useState } from 'react';\nimport {\n  ShaderMount as ShaderMountVanilla,\n  type PaperShaderElement,\n  type ShaderMotionParams,\n  type ShaderMountUniforms,\n} from '@paper-design/shaders';\nimport { useMergeRefs } from './use-merge-refs.js';\n\n/**\n * React Shader Mount can also accept strings as uniform values, which will assumed to be URLs and loaded as images\n *\n * We accept undefined as a convenience for server rendering, when some things may be undefined\n * We just skip setting the uniform if it's undefined. This allows the shader mount to still take up space during server rendering\n */\ninterface ShaderMountUniformsReact {\n  [key: string]: string | boolean | number | number[] | number[][] | HTMLImageElement | undefined;\n}\n\nexport interface ShaderMountProps extends Omit<React.ComponentProps<'div'>, 'color' | 'ref'>, ShaderMotionParams {\n  ref?: React.Ref<PaperShaderElement>;\n  fragmentShader: string;\n  uniforms: ShaderMountUniformsReact;\n  minPixelRatio?: number;\n  maxPixelCount?: number;\n  webGlContextAttributes?: WebGLContextAttributes;\n}\n\nexport interface ShaderComponentProps extends Omit<React.ComponentProps<'div'>, 'color' | 'ref'> {\n  ref?: React.Ref<PaperShaderElement>;\n  minPixelRatio?: number;\n  maxPixelCount?: number;\n  webGlContextAttributes?: WebGLContextAttributes;\n}\n\n/** Parse the provided uniforms, turning URL strings into loaded images */\nasync function processUniforms(uniformsProp: ShaderMountUniformsReact): Promise<ShaderMountUniforms> {\n  const processedUniforms = {} as ShaderMountUniforms;\n  const imageLoadPromises: Promise<void>[] = [];\n\n  const isValidUrl = (url: string): boolean => {\n    try {\n      // Handle absolute paths\n      if (url.startsWith('/')) return true;\n      // Check if it's a valid URL\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  };\n\n  const isExternalUrl = (url: string): boolean => {\n    try {\n      if (url.startsWith('/')) return false;\n      const urlObject = new URL(url, window.location.origin);\n      return urlObject.origin !== window.location.origin;\n    } catch {\n      return false;\n    }\n  };\n\n  Object.entries(uniformsProp).forEach(([key, value]) => {\n    if (typeof value === 'string') {\n      // Make sure the provided string is a valid URL or just skip trying to set this uniform entirely\n      if (!isValidUrl(value)) {\n        console.warn(`Uniform \"${key}\" has invalid URL \"${value}\". Skipping image loading.`);\n        return;\n      }\n\n      const imagePromise = new Promise<void>((resolve, reject) => {\n        const img = new Image();\n        if (isExternalUrl(value)) {\n          img.crossOrigin = 'anonymous';\n        }\n        img.onload = () => {\n          processedUniforms[key] = img;\n          resolve();\n        };\n        img.onerror = () => {\n          console.error(`Could not set uniforms. Failed to load image at ${value}`);\n          reject();\n        };\n        img.src = value;\n      });\n      imageLoadPromises.push(imagePromise);\n    } else {\n      processedUniforms[key] = value;\n    }\n  });\n\n  await Promise.all(imageLoadPromises);\n  return processedUniforms;\n}\n\n/**\n * A React component that mounts a shader and updates its uniforms as the component's props change\n * If you pass a string as a uniform value, it will be assumed to be a URL and attempted to be loaded as an image\n */\nexport const ShaderMount: React.FC<ShaderMountProps> = forwardRef<PaperShaderElement, ShaderMountProps>(\n  function ShaderMountImpl(\n    {\n      fragmentShader,\n      uniforms: uniformsProp,\n      webGlContextAttributes,\n      speed = 0,\n      frame = 0,\n      minPixelRatio,\n      maxPixelCount,\n      ...divProps\n    },\n    forwardedRef\n  ) {\n    const [isInitialized, setIsInitialized] = useState(false);\n    const divRef = useRef<PaperShaderElement>(null);\n    const shaderMountRef: React.RefObject<ShaderMountVanilla | null> = useRef<ShaderMountVanilla>(null);\n\n    // Initialize the ShaderMountVanilla\n    useEffect(() => {\n      const initShader = async () => {\n        const uniforms = await processUniforms(uniformsProp);\n\n        if (divRef.current && !shaderMountRef.current) {\n          shaderMountRef.current = new ShaderMountVanilla(\n            divRef.current,\n            fragmentShader,\n            uniforms,\n            webGlContextAttributes,\n            speed,\n            frame,\n            minPixelRatio,\n            maxPixelCount\n          );\n\n          setIsInitialized(true);\n        }\n      };\n\n      initShader();\n\n      return () => {\n        shaderMountRef.current?.dispose();\n        shaderMountRef.current = null;\n      };\n    }, [fragmentShader, webGlContextAttributes]);\n\n    // Uniforms\n    useEffect(() => {\n      const updateUniforms = async () => {\n        const uniforms = await processUniforms(uniformsProp);\n        shaderMountRef.current?.setUniforms(uniforms);\n      };\n\n      updateUniforms();\n    }, [uniformsProp, isInitialized]);\n\n    // Speed\n    useEffect(() => {\n      shaderMountRef.current?.setSpeed(speed);\n    }, [speed, isInitialized]);\n\n    // Max Pixel Count\n    useEffect(() => {\n      shaderMountRef.current?.setMaxPixelCount(maxPixelCount);\n    }, [maxPixelCount, isInitialized]);\n\n    // Min Pixel Ratio\n    useEffect(() => {\n      shaderMountRef.current?.setMinPixelRatio(minPixelRatio);\n    }, [minPixelRatio, isInitialized]);\n\n    // Frame\n    useEffect(() => {\n      shaderMountRef.current?.setFrame(frame);\n    }, [frame, isInitialized]);\n\n    const mergedRef = useMergeRefs([divRef, forwardedRef]) as unknown as React.RefObject<HTMLDivElement>;\n    return <div ref={mergedRef} {...divProps} />;\n  }\n);\n\nShaderMount.displayName = 'ShaderMount';\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1028, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/node_modules/%40paper-design/shaders-react/src/color-props-are-equal.ts"],"sourcesContent":["interface PropsWithColors {\n  colors?: string[];\n  [key: string]: unknown;\n}\n\nexport function colorPropsAreEqual(prevProps: PropsWithColors, nextProps: PropsWithColors): boolean {\n  for (const key in prevProps) {\n    if (key === 'colors') {\n      const prevIsArray = Array.isArray(prevProps.colors);\n      const nextIsArray = Array.isArray(nextProps.colors);\n\n      if (!prevIsArray || !nextIsArray) {\n        if (Object.is(prevProps.colors, nextProps.colors) === false) {\n          return false;\n        }\n\n        continue;\n      }\n\n      if (prevProps.colors?.length !== nextProps.colors?.length) {\n        return false;\n      }\n\n      if (!prevProps.colors?.every((color, index) => color === nextProps.colors?.[index])) {\n        return false;\n      }\n\n      continue;\n    }\n\n    if (Object.is(prevProps[key], nextProps[key]) === false) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"names":[],"mappings":";;;;;;;AAKO,SAAS,mBAAmB,SAAA,EAA4B,SAAA,EAAqC;IAClG,IAAA,MAAW,OAAO,UAAW;QAC3B,IAAI,QAAQ,UAAU;YACpB,MAAM,cAAc,MAAM,OAAA,CAAQ,UAAU,MAAM;YAClD,MAAM,cAAc,MAAM,OAAA,CAAQ,UAAU,MAAM;YAElD,IAAI,CAAC,eAAe,CAAC,aAAa;gBAChC,IAAI,OAAO,EAAA,CAAG,UAAU,MAAA,EAAQ,UAAU,MAAM,MAAM,OAAO;oBAC3D,OAAO;gBACT;gBAEA;YACF;YAEA,IAAI,UAAU,MAAA,EAAQ,WAAW,UAAU,MAAA,EAAQ,QAAQ;gBACzD,OAAO;YACT;YAEA,IAAI,CAAC,UAAU,MAAA,EAAQ,MAAM,CAAC,OAAO,QAAU,UAAU,UAAU,MAAA,EAAA,CAAS,KAAK,CAAC,GAAG;gBACnF,OAAO;YACT;YAEA;QACF;QAEA,IAAI,OAAO,EAAA,CAAG,SAAA,CAAU,GAAG,CAAA,EAAG,SAAA,CAAU,GAAG,CAAC,MAAM,OAAO;YACvD,OAAO;QACT;IACF;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1066, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/node_modules/%40paper-design/shaders/src/shader-sizing.ts"],"sourcesContent":["/*\n ===================================================================\n The space coordinates passed from the vertex shader.\n\n `sizingVariablesDeclaration` must be included in every fragment\n shader—unless we want to apply sizing to the coordinates directly\n in the fragment shader.\n\n So far, the only exception is when we need to apply pixelization\n before sizing (e.g., to make dithering pixels independent of sizing).\n*/\nexport const sizingVariablesDeclaration = `\nin vec2 v_objectUV;\nin vec2 v_responsiveUV;\nin vec2 v_responsiveBoxGivenSize;\nin vec2 v_patternUV;\nin vec2 v_imageUV;`;\n\n/*\n ===================================================================\n Additional variables used only for drawing a sizing overlay.\n*/\nexport const sizingDebugVariablesDeclaration = `\nin vec2 v_objectBoxSize;\nin vec2 v_objectHelperBox;\nin vec2 v_responsiveBoxSize;\nin vec2 v_responsiveHelperBox;\nin vec2 v_patternBoxSize;\nin vec2 v_patternHelperBox;`;\n\n/*\n ===================================================================\n In most cases, sizing UNIFORMS are used only in the vertex shader.\n But there are cases where we need to pass them to the fragment shader\n as well:\n  - dithering pixelization where all the sizing happens in fragment\n  - drawing the sizing helpers\n*/\nexport const sizingUniformsDeclaration = `\nuniform float u_originX;\nuniform float u_originY;\nuniform float u_worldWidth;\nuniform float u_worldHeight;\nuniform float u_fit;\n\nuniform float u_scale;\nuniform float u_rotation;\nuniform float u_offsetX;\nuniform float u_offsetY;`;\n\n/*\n ===================================================================\n In most cases, sizing TRANSFORMS are applied in the vertex shader.\n For exceptions (e.g., dithering pixelization), the operations below\n need to be included in the fragment shader instead.\n\n The transforms are identical to those in the vertex shader,\n except for the `USE_PIXELIZATION` part we insert at start.\n*/\nexport const sizingUV = `\n\n  vec2 uv = gl_FragCoord.xy / u_resolution.xy;\n  #ifdef USE_PIXELIZATION\n    float pxSize = u_pxSize * u_pixelRatio;\n    vec2 pxSizeUv = gl_FragCoord.xy;\n    pxSizeUv -= .5 * u_resolution;\n    pxSizeUv /= pxSize;\n    uv = floor(pxSizeUv) * pxSize / u_resolution.xy;    \n    uv += .5;\n  #endif\n  uv -= .5;\n\n  \n  // ===================================================\n  // sizing params shared between objects and patterns\n  \n  vec2 boxOrigin = vec2(.5 - u_originX, u_originY - .5);\n  vec2 givenBoxSize = vec2(u_worldWidth, u_worldHeight);\n  givenBoxSize = max(givenBoxSize, vec2(1.)) * u_pixelRatio;\n  vec2 maxBoxSize = vec2(max(u_resolution.x, givenBoxSize.x), max(u_resolution.y, givenBoxSize.y));\n  float r = u_rotation * 3.14159265358979323846 / 180.;\n  mat2 graphicRotation = mat2(cos(r), sin(r), -sin(r), cos(r));\n  vec2 graphicOffset = vec2(-u_offsetX, u_offsetY);\n\n  \n  // ===================================================\n  // Sizing api for objects (graphics with fixed ratio)\n\n  #ifdef USE_OBJECT_SIZING\n    float fixedRatio = 1.;\n    vec2 fixedRatioBoxGivenSize = vec2(\n      (u_worldWidth == 0.) ? u_resolution.x : givenBoxSize.x,\n      (u_worldHeight == 0.) ? u_resolution.y : givenBoxSize.y\n    );\n    vec2 objectBoxSize = vec2(0.);\n    // fit = none\n    objectBoxSize.x = fixedRatio * min(fixedRatioBoxGivenSize.x / fixedRatio, fixedRatioBoxGivenSize.y);\n    if (u_fit == 1.) { // fit = contain\n      objectBoxSize.x = fixedRatio * min(maxBoxSize.x / fixedRatio, maxBoxSize.y);\n    } else if (u_fit == 2.) {  // fit = cover\n      objectBoxSize.x = fixedRatio * max(maxBoxSize.x / fixedRatio, maxBoxSize.y);\n    }\n    objectBoxSize.y = objectBoxSize.x / fixedRatio;\n    vec2 objectWorldScale = u_resolution.xy / objectBoxSize;\n  \n    #ifdef ADD_HELPERS\n      vec2 objectHelperBox = gl_FragCoord.xy / u_resolution.xy;\n      objectHelperBox -= .5;\n      objectHelperBox *= objectWorldScale;\n      objectHelperBox += boxOrigin * (objectWorldScale - 1.);  \n    #endif\n  \n    vec2 objectUV = uv;\n    objectUV *= objectWorldScale;\n    objectUV += boxOrigin * (objectWorldScale - 1.);\n    objectUV += vec2(-u_offsetX, u_offsetY);\n    objectUV /= u_scale;\n    objectUV = graphicRotation * objectUV;\n  #endif\n  \n  // ===================================================\n \n  // ===================================================\n  // Sizing api for patterns (graphics respecting u_worldWidth / u_worldHeight ratio)\n  \n  #ifdef USE_PATTERN_SIZING\n    float patternBoxRatio = givenBoxSize.x / givenBoxSize.y;\n    vec2 patternBoxGivenSize = vec2(\n      (u_worldWidth == 0.) ? u_resolution.x : givenBoxSize.x,\n      (u_worldHeight == 0.) ? u_resolution.y : givenBoxSize.y\n    );\n    vec2 patternBoxSize = vec2(0.);\n    // fit = none\n    patternBoxSize.x = patternBoxRatio * min(patternBoxGivenSize.x / patternBoxRatio, patternBoxGivenSize.y);\n    float patternWorldNoFitBoxWidth = patternBoxSize.x;\n    if (u_fit == 1.) {  // fit = contain\n      patternBoxSize.x = patternBoxRatio * min(maxBoxSize.x / patternBoxRatio, maxBoxSize.y);\n    } else if (u_fit == 2.) {  // fit = cover\n      patternBoxSize.x = patternBoxRatio * max(maxBoxSize.x / patternBoxRatio, maxBoxSize.y);\n    }\n    patternBoxSize.y = patternBoxSize.x / patternBoxRatio;\n    vec2 patternWorldScale = u_resolution.xy / patternBoxSize;\n  \n    #ifdef ADD_HELPERS  \n      vec2 patternHelperBox = gl_FragCoord.xy / u_resolution.xy;\n      patternHelperBox -= .5;\n      patternHelperBox *= patternWorldScale;\n      patternHelperBox += boxOrigin * (patternWorldScale - 1.);  \n    #endif\n  \n    vec2 patternUV = uv;\n    patternUV += vec2(-u_offsetX, u_offsetY) / patternWorldScale;\n    patternUV += boxOrigin;\n    patternUV -= boxOrigin / patternWorldScale;\n    patternUV *= u_resolution.xy;\n    patternUV /= u_pixelRatio;\n    if (u_fit > 0.) {\n      patternUV *= (patternWorldNoFitBoxWidth / patternBoxSize.x);\n    }\n    patternUV /= u_scale;\n    patternUV = graphicRotation * patternUV;\n    patternUV += boxOrigin / patternWorldScale;\n    patternUV -= boxOrigin;\n    patternUV += .5;\n  #endif\n    \n  // ===================================================\n \n  // ===================================================\n  // Sizing api for image filters\n  \n  #ifdef USE_IMAGE_SIZING\n\n    vec2 imageBoxSize;\n    if (u_fit == 1.) { // contain\n      imageBoxSize.x = min(maxBoxSize.x / u_imageAspectRatio, maxBoxSize.y) * u_imageAspectRatio;\n    } else if (u_fit == 2.) { // cover\n      imageBoxSize.x = max(maxBoxSize.x / u_imageAspectRatio, maxBoxSize.y) * u_imageAspectRatio;\n    } else {\n      imageBoxSize.x = min(10.0, 10.0 / u_imageAspectRatio * u_imageAspectRatio);\n    }\n    imageBoxSize.y = imageBoxSize.x / u_imageAspectRatio;\n    vec2 imageBoxScale = u_resolution.xy / imageBoxSize;\n\n    #ifdef ADD_HELPERS\n      vec2 imageHelperBox = uv;\n      imageHelperBox *= imageBoxScale;\n      imageHelperBox += boxOrigin * (imageBoxScale - 1.);\n    #endif\n\n    vec2 imageUV = uv;\n    imageUV *= imageBoxScale;\n    imageUV += boxOrigin * (imageBoxScale - 1.);\n    imageUV += graphicOffset;\n    imageUV /= u_scale;\n    imageUV.x *= u_imageAspectRatio;\n    imageUV = graphicRotation * imageUV;\n    imageUV.x /= u_imageAspectRatio;\n    \n    imageUV += .5;\n    imageUV.y = 1. - imageUV.y;\n  #endif\n`;\n\n/*\n ===================================================================\n Helpers used to draw the sizing (box, box origin and graphic origin)\n over the shader. Can be used with both vertex sizing and vector sizing\n\n helperBox and boxSize should be defined before inserting the code\n*/\nexport const drawSizingHelpers = `\n  vec2 worldBoxDist = abs(helperBox);\n  float boxStroke = (step(max(worldBoxDist.x, worldBoxDist.y), .5) - step(max(worldBoxDist.x, worldBoxDist.y), .495));\n  color.rgb = mix(color.rgb, vec3(1., 0., 0.), boxStroke);\n  opacity += boxStroke;\n\n  vec2 boxOriginCopy = vec2(.5 - u_originX, u_originY - .5);\n  vec2 boxOriginDist = helperBox + boxOriginCopy;\n  boxOriginDist.x *= (boxSize.x / boxSize.y);\n  float boxOriginPoint = 1. - smoothstep(0., .05, length(boxOriginDist));\n  \n  vec2 graphicOriginPointDist = helperBox + vec2(-u_offsetX, u_offsetY);\n  graphicOriginPointDist.x *= (boxSize.x / boxSize.y);\n  float graphicOriginPoint = 1. - smoothstep(0., .05, length(graphicOriginPointDist));\n  \n  color.rgb = mix(color.rgb, vec3(0., 1., 0.), boxOriginPoint);\n  opacity += boxOriginPoint;\n  color.rgb = mix(color.rgb, vec3(0., 0., 1.), graphicOriginPoint);\n  opacity += graphicOriginPoint;\n`;\n\nexport interface ShaderSizingUniforms {\n  u_fit: (typeof ShaderFitOptions)[ShaderFit];\n  u_scale: number;\n  u_rotation: number;\n  u_originX: number;\n  u_originY: number;\n  u_offsetX: number;\n  u_offsetY: number;\n  u_worldWidth: number;\n  u_worldHeight: number;\n}\n\nexport interface ShaderSizingParams {\n  fit?: 'none' | 'contain' | 'cover';\n  scale?: number;\n  rotation?: number;\n  originX?: number;\n  originY?: number;\n  offsetX?: number;\n  offsetY?: number;\n  worldWidth?: number;\n  worldHeight?: number;\n}\n\nexport const defaultObjectSizing: Required<ShaderSizingParams> = {\n  fit: 'contain',\n  scale: 1,\n  rotation: 0,\n  offsetX: 0,\n  offsetY: 0,\n  originX: 0.5,\n  originY: 0.5,\n  worldWidth: 0,\n  worldHeight: 0,\n};\n\nexport const defaultPatternSizing: Required<ShaderSizingParams> = {\n  fit: 'none',\n  scale: 1,\n  rotation: 0,\n  offsetX: 0,\n  offsetY: 0,\n  originX: 0.5,\n  originY: 0.5,\n  worldWidth: 0,\n  worldHeight: 0,\n};\n\nexport const ShaderFitOptions = {\n  none: 0,\n  contain: 1,\n  cover: 2,\n} as const;\n\nexport type ShaderFit = keyof typeof ShaderFitOptions;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAWO,MAAM,6BAA6B,CAAA;;;;;kBAAA,CAAA;AAWnC,MAAM,kCAAkC,CAAA;;;;;;2BAAA,CAAA;AAgBxC,MAAM,4BAA4B,CAAA;;;;;;;;;;wBAAA,CAAA;AAqBlC,MAAM,WAAW,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAA;AAwJjB,MAAM,oBAAoB,CAAA;;;;;;;;;;;;;;;;;;;AAAA,CAAA;AA6C1B,MAAM,sBAAoD;IAC/D,KAAK;IACL,OAAO;IACP,UAAU;IACV,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,YAAY;IACZ,aAAa;AACf;AAEO,MAAM,uBAAqD;IAChE,KAAK;IACL,OAAO;IACP,UAAU;IACV,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,YAAY;IACZ,aAAa;AACf;AAEO,MAAM,mBAAmB;IAC9B,MAAM;IACN,SAAS;IACT,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1308, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/node_modules/%40paper-design/shaders/src/get-shader-color-from-string.ts"],"sourcesContent":["/**  Convert color string from HSL, RGB, or hex to 0-to-1-range-RGBA array */\nexport function getShaderColorFromString(\n  colorString: string | [number, number, number] | [number, number, number, number] | undefined\n): [number, number, number, number] {\n  // If the color string is already an array of 3 or 4 numbers, return it (with alpha=1 if needed)\n  if (Array.isArray(colorString)) {\n    if (colorString.length === 4) return colorString as [number, number, number, number];\n    if (colorString.length === 3) return [...colorString, 1];\n    return fallbackColor;\n  }\n\n  // If the color string is not a string, return the fallback\n  if (typeof colorString !== 'string') {\n    return fallbackColor;\n  }\n\n  let r: number,\n    g: number,\n    b: number,\n    a = 1;\n  if (colorString.startsWith('#')) {\n    [r, g, b, a] = hexToRgba(colorString);\n  } else if (colorString.startsWith('rgb')) {\n    [r, g, b, a] = parseRgba(colorString);\n  } else if (colorString.startsWith('hsl')) {\n    [r, g, b, a] = hslaToRgba(parseHsla(colorString));\n  } else {\n    console.error('Unsupported color format', colorString);\n    return fallbackColor;\n  }\n\n  return [clamp(r, 0, 1), clamp(g, 0, 1), clamp(b, 0, 1), clamp(a, 0, 1)];\n}\n\n/** Convert hex to RGBA (0 to 1 range) */\nfunction hexToRgba(hex: string): [number, number, number, number] {\n  // Remove # if present\n  hex = hex.replace(/^#/, '');\n\n  // Expand three-letter hex to six-letter\n  if (hex.length === 3) {\n    hex = hex\n      .split('')\n      .map((char) => char + char)\n      .join('');\n  }\n  // Expand six-letter hex to eight-letter (add full opacity if no alpha)\n  if (hex.length === 6) {\n    hex = hex + 'ff';\n  }\n\n  // Parse the components\n  const r = parseInt(hex.slice(0, 2), 16) / 255;\n  const g = parseInt(hex.slice(2, 4), 16) / 255;\n  const b = parseInt(hex.slice(4, 6), 16) / 255;\n  const a = parseInt(hex.slice(6, 8), 16) / 255;\n\n  return [r, g, b, a];\n}\n\n/** Parse RGBA string to RGBA (0 to 1 range) */\nfunction parseRgba(rgba: string): [number, number, number, number] {\n  // Match both rgb and rgba patterns\n  const match = rgba.match(/^rgba?\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*([0-9.]+))?\\s*\\)$/i);\n  if (!match) return [0, 0, 0, 1];\n\n  return [\n    parseInt(match[1] ?? '0') / 255,\n    parseInt(match[2] ?? '0') / 255,\n    parseInt(match[3] ?? '0') / 255,\n    match[4] === undefined ? 1 : parseFloat(match[4]),\n  ];\n}\n\n/** Parse HSLA string */\nfunction parseHsla(hsla: string): [number, number, number, number] {\n  const match = hsla.match(/^hsla?\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(?:,\\s*([0-9.]+))?\\s*\\)$/i);\n  if (!match) return [0, 0, 0, 1];\n\n  return [\n    parseInt(match[1] ?? '0'),\n    parseInt(match[2] ?? '0'),\n    parseInt(match[3] ?? '0'),\n    match[4] === undefined ? 1 : parseFloat(match[4]),\n  ];\n}\n\n/** Convert HSLA to RGBA (0 to 1 range) */\nfunction hslaToRgba(hsla: [number, number, number, number]): [number, number, number, number] {\n  const [h, s, l, a] = hsla;\n  const hDecimal = h / 360;\n  const sDecimal = s / 100;\n  const lDecimal = l / 100;\n  let r, g, b;\n\n  if (s === 0) {\n    r = g = b = lDecimal; // achromatic\n  } else {\n    const hue2rgb = (p: number, q: number, t: number) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    const q = lDecimal < 0.5 ? lDecimal * (1 + sDecimal) : lDecimal + sDecimal - lDecimal * sDecimal;\n    const p = 2 * lDecimal - q;\n    r = hue2rgb(p, q, hDecimal + 1 / 3);\n    g = hue2rgb(p, q, hDecimal);\n    b = hue2rgb(p, q, hDecimal - 1 / 3);\n  }\n\n  return [r, g, b, a];\n}\n\nexport const clamp = (n: number, min: number, max: number): number => Math.min(Math.max(n, min), max);\n\nconst fallbackColor = [0, 0, 0, 1] as [0, 0, 0, 1];\n"],"names":["p","q"],"mappings":"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","debugId":null}},
    {"offset": {"line": 1439, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/node_modules/%40paper-design/shaders/src/shader-utils.ts"],"sourcesContent":["// language=GLSL\nexport const declarePI = `\n#define TWO_PI 6.28318530718\n#define PI 3.14159265358979323846\n`;\n\n// language=GLSL\nexport const rotation2 = `\nvec2 rotate(vec2 uv, float th) {\n  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n`;\n\n// language=GLSL\nexport const proceduralHash11 = `\n  float hash11(float p) {\n    p = fract(p * 0.3183099) + 0.1;\n    p *= p + 19.19;\n    return fract(p * p);\n  }\n`;\n\n// language=GLSL\nexport const proceduralHash21 = `\n  float hash21(vec2 p) {\n    p = fract(p * vec2(0.3183099, 0.3678794)) + 0.1;\n    p += dot(p, p + 19.19);\n    return fract(p.x * p.y);\n  }\n`;\n\n// language=GLSL\nexport const proceduralHash22 = `\n  vec2 hash22(vec2 p) {\n    p = fract(p * vec2(0.3183099, 0.3678794)) + 0.1;\n    p += dot(p, p.yx + 19.19);\n    return fract(vec2(p.x * p.y, p.x + p.y));\n  }\n`;\n\n// language=GLSL\nexport const textureRandomizerR = `\n  float randomR(vec2 p) {\n    vec2 uv = floor(p) / 100. + .5;\n    return texture(u_noiseTexture, fract(uv)).r;\n  }\n`;\n\n// language=GLSL\nexport const textureRandomizerGB = `\n  vec2 randomGB(vec2 p) {\n    vec2 uv = floor(p) / 100. + .5;\n    return texture(u_noiseTexture, fract(uv)).gb;\n  }\n`;\n\n// language=GLSL\nexport const colorBandingFix = `\n  color += 1. / 256. * (fract(sin(dot(.014 * gl_FragCoord.xy, vec2(12.9898, 78.233))) * 43758.5453123) - .5);\n`;\n\n// language=GLSL\nexport const simplexNoise = `\nvec3 permute(vec3 x) { return mod(((x * 34.0) + 1.0) * x, 289.0); }\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n    -0.577350269189626, 0.024390243902439);\n  vec2 i = floor(v + dot(v, C.yy));\n  vec2 x0 = v - i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))\n    + i.x + vec3(0.0, i1.x, 1.0));\n  vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy),\n      dot(x12.zw, x12.zw)), 0.0);\n  m = m * m;\n  m = m * m;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n  vec3 g;\n  g.x = a0.x * x0.x + h.x * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n`;\n\n// language=GLSL\nexport const fiberNoise = `\nfloat fiberRandom(vec2 p) {\n  vec2 uv = floor(p) / 100.;\n  return texture(u_noiseTexture, fract(uv)).b;\n}\n\nfloat fiberValueNoise(vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n  float a = fiberRandom(i);\n  float b = fiberRandom(i + vec2(1.0, 0.0));\n  float c = fiberRandom(i + vec2(0.0, 1.0));\n  float d = fiberRandom(i + vec2(1.0, 1.0));\n  vec2 u = f * f * (3.0 - 2.0 * f);\n  float x1 = mix(a, b, u.x);\n  float x2 = mix(c, d, u.x);\n  return mix(x1, x2, u.y);\n}\n\nfloat fiberNoiseFbm(in vec2 n, vec2 seedOffset) {\n  float total = 0.0, amplitude = 1.;\n  for (int i = 0; i < 4; i++) {\n    n = rotate(n, .7);\n    total += fiberValueNoise(n + seedOffset) * amplitude;\n    n *= 2.;\n    amplitude *= 0.6;\n  }\n  return total;\n}\n\nfloat fiberNoise(vec2 uv, vec2 seedOffset) {\n  float epsilon = 0.001;\n  float n1 = fiberNoiseFbm(uv + vec2(epsilon, 0.0), seedOffset);\n  float n2 = fiberNoiseFbm(uv - vec2(epsilon, 0.0), seedOffset);\n  float n3 = fiberNoiseFbm(uv + vec2(0.0, epsilon), seedOffset);\n  float n4 = fiberNoiseFbm(uv - vec2(0.0, epsilon), seedOffset);\n  return length(vec2(n1 - n2, n3 - n4)) / (2.0 * epsilon);\n}\n`;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACO,MAAM,YAAY,CAAA;;;AAAA,CAAA;AAMlB,MAAM,YAAY,CAAA;;;;AAAA,CAAA;AAOlB,MAAM,mBAAmB,CAAA;;;;;;AAAA,CAAA;AASzB,MAAM,mBAAmB,CAAA;;;;;;AAAA,CAAA;AASzB,MAAM,mBAAmB,CAAA;;;;;;AAAA,CAAA;AASzB,MAAM,qBAAqB,CAAA;;;;;AAAA,CAAA;AAQ3B,MAAM,sBAAsB,CAAA;;;;;AAAA,CAAA;AAQ5B,MAAM,kBAAkB,CAAA;;AAAA,CAAA;AAKxB,MAAM,eAAe,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAA;AA+BrB,MAAM,aAAa,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAA","debugId":null}},
    {"offset": {"line": 1583, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/node_modules/%40paper-design/shaders/src/shaders/mesh-gradient.ts"],"sourcesContent":["import type { vec4 } from '../types.js';\nimport type { ShaderMotionParams } from '../shader-mount.js';\nimport { sizingVariablesDeclaration, type ShaderSizingParams, type ShaderSizingUniforms } from '../shader-sizing.js';\nimport { declarePI, rotation2, colorBandingFix } from '../shader-utils.js';\n\nexport const meshGradientMeta = {\n  maxColorCount: 10,\n} as const;\n\n/**\n * A composition of N color spots (one per color) with 2 types of\n * distortions applied to the coordinate space\n *\n * Uniforms:\n * - u_colors (vec4[]), u_colorsCount (float used as integer)\n * - u_distortion: warp distortion\n * - u_swirl: vortex distortion\n *\n */\n\n// language=GLSL\nexport const meshGradientFragmentShader: string = `#version 300 es\nprecision mediump float;\n\nuniform float u_time;\n\nuniform vec4 u_colors[${meshGradientMeta.maxColorCount}];\nuniform float u_colorsCount;\n\nuniform float u_distortion;\nuniform float u_swirl;\n\n${sizingVariablesDeclaration}\n\nout vec4 fragColor;\n\n${declarePI}\n${rotation2}\n\nvec2 getPosition(int i, float t) {\n  float a = float(i) * .37;\n  float b = .6 + mod(float(i), 3.) * .3;\n  float c = .8 + mod(float(i + 1), 4.) * 0.25;\n\n  float x = sin(t * b + a);\n  float y = cos(t * c + a * 1.5);\n\n  return .5 + .5 * vec2(x, y);\n}\n\nvoid main() {\n  vec2 shape_uv = v_objectUV;\n\n  shape_uv += .5;\n\n  float t = .5 * u_time;\n\n  float radius = smoothstep(0., 1., length(shape_uv - .5));\n  float center = 1. - radius;\n  for (float i = 1.; i <= 2.; i++) {\n    shape_uv.x += u_distortion * center / i * sin(t + i * .4 * smoothstep(.0, 1., shape_uv.y)) * cos(.2 * t + i * 2.4 * smoothstep(.0, 1., shape_uv.y));\n    shape_uv.y += u_distortion * center / i * cos(t + i * 2. * smoothstep(.0, 1., shape_uv.x));\n  }\n\n  vec2 uvRotated = shape_uv;\n  uvRotated -= vec2(.5);\n  float angle = 3. * u_swirl * radius;\n  uvRotated = rotate(uvRotated, -angle);\n  uvRotated += vec2(.5);\n\n  vec3 color = vec3(0.);\n  float opacity = 0.;\n  float totalWeight = 0.;\n\n  for (int i = 0; i < ${meshGradientMeta.maxColorCount}; i++) {\n    if (i >= int(u_colorsCount)) break;\n\n    vec2 pos = getPosition(i, t);\n    vec3 colorFraction = u_colors[i].rgb * u_colors[i].a;\n    float opacityFraction = u_colors[i].a;\n\n    float dist = length(uvRotated - pos);\n\n    dist = pow(dist, 3.5);\n    float weight = 1. / (dist + 1e-3);\n    color += colorFraction * weight;\n    opacity += opacityFraction * weight;\n    totalWeight += weight;\n  }\n\n  color /= totalWeight;\n  opacity /= totalWeight;\n\n  ${colorBandingFix}\n\n  fragColor = vec4(color, opacity);\n}\n`;\n\nexport interface MeshGradientUniforms extends ShaderSizingUniforms {\n  u_colors: vec4[];\n  u_colorsCount: number;\n  u_distortion: number;\n  u_swirl: number;\n}\n\nexport interface MeshGradientParams extends ShaderSizingParams, ShaderMotionParams {\n  colors?: string[];\n  distortion?: number;\n  swirl?: number;\n}\n"],"names":[],"mappings":";;;;;;;;;AAEA,SAAS,kCAAsF;AAC/F,SAAS,WAAW,WAAW,uBAAuB;;;AAE/C,MAAM,mBAAmB;IAC9B,eAAe;AACjB;AAcO,MAAM,6BAAqC,CAAA;;;;;sBAAA,EAK1B,iBAAiB,aAAa,CAAA;;;;;;AAAA,EAMpD,sMAA0B,CAAA;;;;AAAA,EAI1B,oLAAS,CAAA;AAAA,EACT,oLAAS,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBAAA,EAqCa,iBAAiB,aAAa,CAAA;;;;;;;;;;;;;;;;;;;EAAA,EAmBlD,0LAAe,CAAA;;;;AAAA,CAAA","debugId":null}},
    {"offset": {"line": 1682, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/node_modules/%40paper-design/shaders-react/src/shaders/mesh-gradient.tsx"],"sourcesContent":["import { memo } from 'react';\nimport { ShaderMount, type ShaderComponentProps } from '../shader-mount.js';\nimport { colorPropsAreEqual } from '../color-props-are-equal.js';\nimport {\n  defaultObjectSizing,\n  getShaderColorFromString,\n  meshGradientFragmentShader,\n  ShaderFitOptions,\n  type MeshGradientParams,\n  type MeshGradientUniforms,\n  type ShaderPreset,\n} from '@paper-design/shaders';\n\nexport interface MeshGradientProps extends ShaderComponentProps, MeshGradientParams {}\n\ntype MeshGradientPreset = ShaderPreset<MeshGradientParams>;\n\nexport const defaultPreset: MeshGradientPreset = {\n  name: 'Default',\n  params: {\n    ...defaultObjectSizing,\n    speed: 1,\n    frame: 0,\n    colors: ['#e0eaff', '#241d9a', '#f75092', '#9f50d3'],\n    distortion: 0.8,\n    swirl: 0.1,\n  },\n};\n\nexport const purplePreset: MeshGradientPreset = {\n  name: 'Purple',\n  params: {\n    ...defaultObjectSizing,\n    speed: 0.6,\n    frame: 0,\n    colors: ['#aaa7d7', '#3c2b8e'],\n    distortion: 1,\n    swirl: 1,\n  },\n};\n\nexport const beachPreset: MeshGradientPreset = {\n  name: 'Beach',\n  params: {\n    ...defaultObjectSizing,\n    speed: 0.1,\n    frame: 0,\n    colors: ['#bcecf6', '#00aaff', '#00f7ff', '#ffd447'],\n    distortion: 0.8,\n    swirl: 0.35,\n  },\n};\n\nexport const inkPreset: MeshGradientPreset = {\n  name: 'Ink',\n  params: {\n    ...defaultObjectSizing,\n    speed: 1,\n    frame: 0,\n    colors: ['#ffffff', '#000000'],\n    distortion: 1,\n    swirl: 0.2,\n    rotation: 90,\n  },\n};\n\nexport const meshGradientPresets: MeshGradientPreset[] = [defaultPreset, inkPreset, purplePreset, beachPreset];\n\nexport const MeshGradient: React.FC<MeshGradientProps> = memo(function MeshGradientImpl({\n  // Own props\n  speed = defaultPreset.params.speed,\n  frame = defaultPreset.params.frame,\n  colors = defaultPreset.params.colors,\n  distortion = defaultPreset.params.distortion,\n  swirl = defaultPreset.params.swirl,\n\n  // Sizing props\n  fit = defaultPreset.params.fit,\n  rotation = defaultPreset.params.rotation,\n  scale = defaultPreset.params.scale,\n  originX = defaultPreset.params.originX,\n  originY = defaultPreset.params.originY,\n  offsetX = defaultPreset.params.offsetX,\n  offsetY = defaultPreset.params.offsetY,\n  worldWidth = defaultPreset.params.worldWidth,\n  worldHeight = defaultPreset.params.worldHeight,\n  ...props\n}: MeshGradientProps) {\n  const uniforms = {\n    // Own uniforms\n    u_colors: colors.map(getShaderColorFromString),\n    u_colorsCount: colors.length,\n    u_distortion: distortion,\n    u_swirl: swirl,\n\n    // Sizing uniforms\n    u_fit: ShaderFitOptions[fit],\n    u_rotation: rotation,\n    u_scale: scale,\n    u_offsetX: offsetX,\n    u_offsetY: offsetY,\n    u_originX: originX,\n    u_originY: originY,\n    u_worldWidth: worldWidth,\n    u_worldHeight: worldHeight,\n  } satisfies MeshGradientUniforms;\n\n  return (\n    <ShaderMount\n      {...props}\n      speed={speed}\n      frame={frame}\n      fragmentShader={meshGradientFragmentShader}\n      uniforms={uniforms}\n    />\n  );\n}, colorPropsAreEqual);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAAS,YAAY;AACrB,SAAS,mBAA8C;AACvD,SAAS,0BAA0B;;;AACnC;AAyGI;;;;;;AA3FG,MAAM,gBAAoC;IAC/C,MAAM;IACN,QAAQ;QACN,GAAG,+LAAA;QACH,OAAO;QACP,OAAO;QACP,QAAQ;YAAC;YAAW;YAAW;YAAW,SAAS;SAAA;QACnD,YAAY;QACZ,OAAO;IACT;AACF;AAEO,MAAM,eAAmC;IAC9C,MAAM;IACN,QAAQ;QACN,GAAG,+LAAA;QACH,OAAO;QACP,OAAO;QACP,QAAQ;YAAC;YAAW,SAAS;SAAA;QAC7B,YAAY;QACZ,OAAO;IACT;AACF;AAEO,MAAM,cAAkC;IAC7C,MAAM;IACN,QAAQ;QACN,GAAG,+LAAA;QACH,OAAO;QACP,OAAO;QACP,QAAQ;YAAC;YAAW;YAAW;YAAW,SAAS;SAAA;QACnD,YAAY;QACZ,OAAO;IACT;AACF;AAEO,MAAM,YAAgC;IAC3C,MAAM;IACN,QAAQ;QACN,GAAG,+LAAA;QACH,OAAO;QACP,OAAO;QACP,QAAQ;YAAC;YAAW,SAAS;SAAA;QAC7B,YAAY;QACZ,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,sBAA4C;IAAC;IAAe;IAAW;IAAc,WAAW;CAAA;AAEtG,MAAM,mBAA4C,6MAAA,EAAK,SAAS,iBAAiB,EAAA,YAAA;AAEtF,QAAQ,cAAc,MAAA,CAAO,KAAA,EAC7B,QAAQ,cAAc,MAAA,CAAO,KAAA,EAC7B,SAAS,cAAc,MAAA,CAAO,MAAA,EAC9B,aAAa,cAAc,MAAA,CAAO,UAAA,EAClC,QAAQ,cAAc,MAAA,CAAO,KAAA,EAAA,eAAA;AAG7B,MAAM,cAAc,MAAA,CAAO,GAAA,EAC3B,WAAW,cAAc,MAAA,CAAO,QAAA,EAChC,QAAQ,cAAc,MAAA,CAAO,KAAA,EAC7B,UAAU,cAAc,MAAA,CAAO,OAAA,EAC/B,UAAU,cAAc,MAAA,CAAO,OAAA,EAC/B,UAAU,cAAc,MAAA,CAAO,OAAA,EAC/B,UAAU,cAAc,MAAA,CAAO,OAAA,EAC/B,aAAa,cAAc,MAAA,CAAO,UAAA,EAClC,cAAc,cAAc,MAAA,CAAO,WAAA,EACnC,GAAG,OACL,EAAsB;IACpB,MAAM,WAAW;QAAA,eAAA;QAEf,UAAU,OAAO,GAAA,CAAI,4NAAwB;QAC7C,eAAe,OAAO,MAAA;QACtB,cAAc;QACd,SAAS;QAAA,kBAAA;QAGT,OAAO,4LAAA,CAAiB,GAAG,CAAA;QAC3B,YAAY;QACZ,SAAS;QACT,WAAW;QACX,WAAW;QACX,WAAW;QACX,WAAW;QACX,cAAc;QACd,eAAe;IACjB;IAEA,OACE,aAAA,GAAA,IAAA,8NAAA,EAAC,+LAAA,EAAA;QACE,GAAG,KAAA;QACJ;QACA;QACA,gBAAgB,iNAAA;QAChB;IAAA;AAGN,GAAG,qNAAkB","debugId":null}}]
}