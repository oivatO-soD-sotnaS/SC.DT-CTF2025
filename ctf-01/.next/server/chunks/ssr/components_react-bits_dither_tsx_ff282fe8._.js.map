{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/otavio/Documents/SC.DT-CTF2025/ctf-01/components/react-bits/dither.tsx"],"sourcesContent":["\"use client\"\n\nimport { useRef, useEffect, forwardRef } from \"react\";\nimport { Canvas, useFrame, useThree, ThreeEvent } from \"@react-three/fiber\";\nimport { EffectComposer, wrapEffect } from \"@react-three/postprocessing\";\nimport { Effect } from \"postprocessing\";\nimport * as THREE from \"three\";\n\nconst waveVertexShader = `\nprecision highp float;\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n  vec4 viewPosition = viewMatrix * modelPosition;\n  gl_Position = projectionMatrix * viewPosition;\n}\n`;\n\nconst waveFragmentShader = `\nprecision highp float;\nuniform vec2 resolution;\nuniform float time;\nuniform float waveSpeed;\nuniform float waveFrequency;\nuniform float waveAmplitude;\nuniform vec3 waveColor;\nuniform vec2 mousePos;\nuniform int enableMouseInteraction;\nuniform float mouseRadius;\n\nvec4 mod289(vec4 x) { return x - floor(x * (1.0/289.0)) * 289.0; }\nvec4 permute(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\nvec2 fade(vec2 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\n\nfloat cnoise(vec2 P) {\n  vec4 Pi = floor(P.xyxy) + vec4(0.0,0.0,1.0,1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0,0.0,1.0,1.0);\n  Pi = mod289(Pi);\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = fract(i * (1.0/41.0)) * 2.0 - 1.0;\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x, gy.x);\n  vec2 g10 = vec2(gx.y, gy.y);\n  vec2 g01 = vec2(gx.z, gy.z);\n  vec2 g11 = vec2(gx.w, gy.w);\n  vec4 norm = taylorInvSqrt(vec4(dot(g00,g00), dot(g01,g01), dot(g10,g10), dot(g11,g11)));\n  g00 *= norm.x; g01 *= norm.y; g10 *= norm.z; g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  return 2.3 * mix(n_x.x, n_x.y, fade_xy.y);\n}\n\nconst int OCTAVES = 4;\nfloat fbm(vec2 p) {\n  float value = 0.0;\n  float amp = 1.0;\n  float freq = waveFrequency;\n  for (int i = 0; i < OCTAVES; i++) {\n    value += amp * abs(cnoise(p));\n    p *= freq;\n    amp *= waveAmplitude;\n  }\n  return value;\n}\n\nfloat pattern(vec2 p) {\n  vec2 p2 = p - time * waveSpeed;\n  return fbm(p + fbm(p2)); \n}\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / resolution.xy;\n  uv -= 0.5;\n  uv.x *= resolution.x / resolution.y;\n  float f = pattern(uv);\n  if (enableMouseInteraction == 1) {\n    vec2 mouseNDC = (mousePos / resolution - 0.5) * vec2(1.0, -1.0);\n    mouseNDC.x *= resolution.x / resolution.y;\n    float dist = length(uv - mouseNDC);\n    float effect = 1.0 - smoothstep(0.0, mouseRadius, dist);\n    f -= 0.5 * effect;\n  }\n  vec3 col = mix(vec3(0.0), waveColor, f);\n  gl_FragColor = vec4(col, 1.0);\n}\n`;\n\nconst ditherFragmentShader = `\nprecision highp float;\nuniform float colorNum;\nuniform float pixelSize;\nconst float bayerMatrix8x8[64] = float[64](\n  0.0/64.0, 48.0/64.0, 12.0/64.0, 60.0/64.0,  3.0/64.0, 51.0/64.0, 15.0/64.0, 63.0/64.0,\n  32.0/64.0,16.0/64.0, 44.0/64.0, 28.0/64.0, 35.0/64.0,19.0/64.0, 47.0/64.0, 31.0/64.0,\n  8.0/64.0, 56.0/64.0,  4.0/64.0, 52.0/64.0, 11.0/64.0,59.0/64.0,  7.0/64.0, 55.0/64.0,\n  40.0/64.0,24.0/64.0, 36.0/64.0, 20.0/64.0, 43.0/64.0,27.0/64.0, 39.0/64.0, 23.0/64.0,\n  2.0/64.0, 50.0/64.0, 14.0/64.0, 62.0/64.0,  1.0/64.0,49.0/64.0, 13.0/64.0, 61.0/64.0,\n  34.0/64.0,18.0/64.0, 46.0/64.0, 30.0/64.0, 33.0/64.0,17.0/64.0, 45.0/64.0, 29.0/64.0,\n  10.0/64.0,58.0/64.0,  6.0/64.0, 54.0/64.0,  9.0/64.0,57.0/64.0,  5.0/64.0, 53.0/64.0,\n  42.0/64.0,26.0/64.0, 38.0/64.0, 22.0/64.0, 41.0/64.0,25.0/64.0, 37.0/64.0, 21.0/64.0\n);\n\nvec3 dither(vec2 uv, vec3 color) {\n  vec2 scaledCoord = floor(uv * resolution / pixelSize);\n  int x = int(mod(scaledCoord.x, 8.0));\n  int y = int(mod(scaledCoord.y, 8.0));\n  float threshold = bayerMatrix8x8[y * 8 + x] - 0.25;\n  float step = 1.0 / (colorNum - 1.0);\n  color += threshold * step;\n  float bias = 0.2;\n  color = clamp(color - bias, 0.0, 1.0);\n  return floor(color * (colorNum - 1.0) + 0.5) / (colorNum - 1.0);\n}\n\nvoid mainImage(in vec4 inputColor, in vec2 uv, out vec4 outputColor) {\n  vec2 normalizedPixelSize = pixelSize / resolution;\n  vec2 uvPixel = normalizedPixelSize * floor(uv / normalizedPixelSize);\n  vec4 color = texture2D(inputBuffer, uvPixel);\n  color.rgb = dither(uv, color.rgb);\n  outputColor = color;\n}\n`;\n\nclass RetroEffectImpl extends Effect {\n  public uniforms: Map<string, THREE.Uniform<any>>;\n  constructor() {\n    const uniforms = new Map<string, THREE.Uniform<any>>([\n      [\"colorNum\", new THREE.Uniform(4.0)],\n      [\"pixelSize\", new THREE.Uniform(2.0)],\n    ]);\n    super(\"RetroEffect\", ditherFragmentShader, { uniforms });\n    this.uniforms = uniforms;\n  }\n  set colorNum(value: number) {\n    this.uniforms.get(\"colorNum\")!.value = value;\n  }\n  get colorNum(): number {\n    return this.uniforms.get(\"colorNum\")!.value;\n  }\n  set pixelSize(value: number) {\n    this.uniforms.get(\"pixelSize\")!.value = value;\n  }\n  get pixelSize(): number {\n    return this.uniforms.get(\"pixelSize\")!.value;\n  }\n}\n\nconst RetroEffect = forwardRef<\n  RetroEffectImpl,\n  { colorNum: number; pixelSize: number }\n>((props, ref) => {\n  const { colorNum, pixelSize } = props;\n  const WrappedRetroEffect = wrapEffect(RetroEffectImpl);\n  return (\n    <WrappedRetroEffect ref={ref} colorNum={colorNum} pixelSize={pixelSize} />\n  );\n});\n\nRetroEffect.displayName = \"RetroEffect\";\n\ninterface WaveUniforms {\n  [key: string]: THREE.Uniform<any>;\n  time: THREE.Uniform<number>;\n  resolution: THREE.Uniform<THREE.Vector2>;\n  waveSpeed: THREE.Uniform<number>;\n  waveFrequency: THREE.Uniform<number>;\n  waveAmplitude: THREE.Uniform<number>;\n  waveColor: THREE.Uniform<THREE.Color>;\n  mousePos: THREE.Uniform<THREE.Vector2>;\n  enableMouseInteraction: THREE.Uniform<number>;\n  mouseRadius: THREE.Uniform<number>;\n}\n\ninterface DitheredWavesProps {\n  waveSpeed: number;\n  waveFrequency: number;\n  waveAmplitude: number;\n  waveColor: [number, number, number];\n  colorNum: number;\n  pixelSize: number;\n  disableAnimation: boolean;\n  enableMouseInteraction: boolean;\n  mouseRadius: number;\n}\n\nfunction DitheredWaves({\n  waveSpeed,\n  waveFrequency,\n  waveAmplitude,\n  waveColor,\n  colorNum,\n  pixelSize,\n  disableAnimation,\n  enableMouseInteraction,\n  mouseRadius,\n}: DitheredWavesProps) {\n  const mesh = useRef<THREE.Mesh>(null);\n  const mouseRef = useRef(new THREE.Vector2());\n  const { viewport, size, gl } = useThree();\n\n  const waveUniformsRef = useRef<WaveUniforms>({\n    time: new THREE.Uniform(0),\n    resolution: new THREE.Uniform(new THREE.Vector2(0, 0)),\n    waveSpeed: new THREE.Uniform(waveSpeed),\n    waveFrequency: new THREE.Uniform(waveFrequency),\n    waveAmplitude: new THREE.Uniform(waveAmplitude),\n    waveColor: new THREE.Uniform(new THREE.Color(...waveColor)),\n    mousePos: new THREE.Uniform(new THREE.Vector2(0, 0)),\n    enableMouseInteraction: new THREE.Uniform(enableMouseInteraction ? 1 : 0),\n    mouseRadius: new THREE.Uniform(mouseRadius),\n  });\n\n  useEffect(() => {\n    const dpr = gl.getPixelRatio();\n    const newWidth = Math.floor(size.width * dpr);\n    const newHeight = Math.floor(size.height * dpr);\n    const currentRes = waveUniformsRef.current.resolution.value;\n    if (currentRes.x !== newWidth || currentRes.y !== newHeight) {\n      currentRes.set(newWidth, newHeight);\n    }\n  }, [size, gl]);\n\n  const prevColor = useRef([...waveColor]);\n  useFrame(({ clock }) => {\n    const u = waveUniformsRef.current;\n\n    if (!disableAnimation) {\n      u.time.value = clock.getElapsedTime();\n    }\n\n    if (u.waveSpeed.value !== waveSpeed) u.waveSpeed.value = waveSpeed;\n    if (u.waveFrequency.value !== waveFrequency)\n      u.waveFrequency.value = waveFrequency;\n    if (u.waveAmplitude.value !== waveAmplitude)\n      u.waveAmplitude.value = waveAmplitude;\n\n    if (!prevColor.current.every((v, i) => v === waveColor[i])) {\n      u.waveColor.value.set(...waveColor);\n      prevColor.current = [...waveColor];\n    }\n\n    u.enableMouseInteraction.value = enableMouseInteraction ? 1 : 0;\n    u.mouseRadius.value = mouseRadius;\n\n    if (enableMouseInteraction) {\n      u.mousePos.value.copy(mouseRef.current);\n    }\n  });\n\n  const handlePointerMove = (e: ThreeEvent<PointerEvent>) => {\n    if (!enableMouseInteraction) return;\n      const rect = gl.domElement.getBoundingClientRect();\n      const dpr = gl.getPixelRatio();\n      mouseRef.current.set(\n        (e.clientX - rect.left) * dpr,\n        (e.clientY - rect.top) * dpr\n      );\n    };\n\n  return (\n    <>\n      <mesh ref={mesh} scale={[viewport.width, viewport.height, 1]}>\n        <planeGeometry args={[1, 1]} />\n        <shaderMaterial\n          vertexShader={waveVertexShader}\n          fragmentShader={waveFragmentShader}\n          uniforms={waveUniformsRef.current}\n        />\n      </mesh>\n\n      <EffectComposer>\n        <RetroEffect colorNum={colorNum} pixelSize={pixelSize} />\n      </EffectComposer>\n\n      <mesh\n        onPointerMove={handlePointerMove}\n        position={[0, 0, 0.01]}\n        scale={[viewport.width, viewport.height, 1]}\n        visible={false}\n      >\n        <planeGeometry args={[1, 1]} />\n        <meshBasicMaterial transparent opacity={0} />\n      </mesh>\n    </>\n  );\n}\n\ninterface DitherProps {\n  waveSpeed?: number;\n  waveFrequency?: number;\n  waveAmplitude?: number;\n  waveColor?: [number, number, number];\n  colorNum?: number;\n  pixelSize?: number;\n  disableAnimation?: boolean;\n  enableMouseInteraction?: boolean;\n  mouseRadius?: number;\n}\n\nexport default function Dither({\n  waveSpeed = 0.05,\n  waveFrequency = 3,\n  waveAmplitude = 0.3,\n  waveColor = [0.5, 0.5, 0.5],\n  colorNum = 4,\n  pixelSize = 2,\n  disableAnimation = false,\n  enableMouseInteraction = true,\n  mouseRadius = 1,\n}: DitherProps) {\n  return (\n    <Canvas\n      className=\"w-full h-full relative\"\n      camera={{ position: [0, 0, 6] }}\n      gl={{ antialias: true, preserveDrawingBuffer: true }}\n    >\n      <DitheredWaves\n        waveSpeed={waveSpeed}\n        waveFrequency={waveFrequency}\n        waveAmplitude={waveAmplitude}\n        waveColor={waveColor}\n        colorNum={colorNum}\n        pixelSize={pixelSize}\n        disableAnimation={disableAnimation}\n        enableMouseInteraction={enableMouseInteraction}\n        mouseRadius={mouseRadius}\n      />\n    </Canvas>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}